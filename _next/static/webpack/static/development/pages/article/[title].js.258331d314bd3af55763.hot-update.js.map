{"version":3,"file":"static/webpack/static/development/pages/article/[title].js.258331d314bd3af55763.hot-update.js","sources":["webpack:///./pages/article/[title].js"],"sourcesContent":["import Markdown from \"react-markdown/with-html\";\nimport Link from \"next/link\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretSquareLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport OpenGraph from \"../../components/opengraph.js\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\n\nconst monthName = [\n\t\"‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°\",\n\t\"‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå\",\n\t\"‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°\",\n\t\"‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô\",\n\t\"‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°\",\n\t\"‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô\",\n\t\"‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°\",\n\t\"‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°\",\n\t\"‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô\",\n\t\"‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°\",\n\t\"‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô\",\n\t\"‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°\"\n];\n\nfunction Blog(props) {\n\treturn (\n\t\t<>\n\t\t\t<OpenGraph {...props} />\n\t\t\t<style jsx>{`\n\t\t\t\ta {\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\tmargin-top: 10px !important;\n\t\t\t\t}\n\t\t\t\ta:visited {\n\t\t\t\t\tcolor: black;\n\t\t\t\t}\n\t\t\t\ta:hover {\n\t\t\t\t\ttext-decoration: underline !important;\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t}\n\t\t\t`}</style>\n\t\t\t<Link href={\"/\"} as={props.basepath + \"/\"}>\n\t\t\t\t<a>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<FontAwesomeIcon icon={faCaretSquareLeft} />{\" \"}\n\t\t\t\t\t\t<span>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</span>\n\t\t\t\t\t</span>\n\t\t\t\t</a>\n\t\t\t</Link>\n\t\t\t<style jsx global>{`\n\t\t\t\t.markdown p img {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tmax-height: 450px;\n\t\t\t\t\tobject-fit: contain;\n\t\t\t\t\tbackground-color: #eee;\n\t\t\t\t\tborder: 1px solid #ddd;\n\t\t\t\t}\n\t\t\t\t.imgCaption {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tcolor: #999;\n\t\t\t\t}\n\t\t\t`}</style>\n\t\t\t<Markdown\n\t\t\t\tsource={`# ${props.title}\\nüìÖ ${props.date}\\n\\n![${props.thumbnailalt}](${props.thumbnail})\\n\\n${props.content}`}\n\t\t\t\trenderers={{\n\t\t\t\t\tcode: props => (\n\t\t\t\t\t\t<SyntaxHighlighter\n\t\t\t\t\t\t\tlanguage={props.language}\n\t\t\t\t\t\t\tchildren={props.value}\n\t\t\t\t\t\t\tshowLineNumbers={true}\n\t\t\t\t\t\t/>\n\t\t\t\t\t),\n\t\t\t\t\timage: imgprops => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tsrc={\n\t\t\t\t\t\t\t\t\t\timgprops.src.search(\"http\") === 0\n\t\t\t\t\t\t\t\t\t\t\t? imgprops.src\n\t\t\t\t\t\t\t\t\t\t\t: props.basepath + imgprops.src\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\talt={imgprops.alt}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<span className=\"imgCaption\">\n\t\t\t\t\t\t\t\t\t{imgprops.alt}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tescapeHtml={false}\n\t\t\t\tclassName=\"markdown\"\n\t\t\t/>\n\t\t</>\n\t);\n}\n\nexport async function getStaticProps({ params }) {\n\tconst fs = require(\"fs\");\n\tconst fm = require(\"front-matter\");\n\tconst resultMarkdown = fm(\n\t\tfs.readFileSync(`./markdown/${params.title}.md`, \"utf8\")\n\t);\n\n\tlet createDate = resultMarkdown.attributes.date.split(\"/\");\n\tcreateDate = new Date(createDate[2], createDate[1], createDate[0]);\n\tconst parsedDate = `${createDate.getDate()} ${\n\t\tmonthName[createDate.getMonth() - 1]\n\t} ${createDate.getFullYear() + 543}`;\n\n\tconst title = resultMarkdown.attributes.title;\n\tconst content = resultMarkdown.body;\n\tconst thumbnail = resultMarkdown.attributes.image;\n\tconst thumbnailAlt = resultMarkdown.attributes.imageAlt;\n\n\t//Description\n\tconst rmMD = require(\"remove-markdown\");\n\tlet description = content;\n\tdescription = rmMD(description);\n\tdescription = description\n\t\t.split(\"\\n\")\n\t\t.filter(filter => filter !== \"\")\n\t\t.join(\" \");\n\n\tif (description.length > 160) {\n\t\tdescription = description.slice(0, 160) + \"...\";\n\t}\n\n\tconsole.log(process.env.basePath);\n\n\treturn {\n\t\tprops: {\n\t\t\tcontent,\n\t\t\ttitle,\n\t\t\tdate: parsedDate,\n\t\t\tthumbnail,\n\t\t\tthumbnailalt: thumbnailAlt || \"\",\n\t\t\tbasedomain: process.env.baseDomain,\n\t\t\tbasepath: process.env.basePath,\n\t\t\tdescription\n\t\t}\n\t};\n}\n\nexport async function getStaticPaths() {\n\tconst fs = require(\"fs\");\n\tconst fm = require(\"front-matter\");\n\tconst path = require(\"path\");\n\tconst markdownArray = fs.readdirSync(\"./markdown\");\n\tconst contentList = markdownArray.map(markdown => {\n\t\tconst file = fs.readFileSync(`./markdown/${markdown}`, \"utf8\");\n\t\tconst content = fm(file);\n\t\treturn {\n\t\t\tfileName: path.parse(markdown).name,\n\t\t\ttitle: content.attributes.title\n\t\t};\n\t});\n\n\tconst staticPaths = { paths: [], fallback: false };\n\n\tcontentList.forEach(markdown =>\n\t\tstaticPaths.paths.push({\n\t\t\tparams: { title: markdown.fileName }\n\t\t})\n\t);\n\n\treturn staticPaths;\n}\n\nexport default Blog;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnBA;AAAA;AAAA;AAsCA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AACA;AAGA;AAKA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAxBA;AA0BA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCA;AACA;;AAyEA;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/article/[title].js.a544dcc0843a97990ada.hot-update.js","sources":["webpack:///./pages/article/[title].js"],"sourcesContent":["import Markdown from \"react-markdown/with-html\";\nimport Link from \"next/link\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretSquareLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport OpenGraph from \"../../components/opengraph.js\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\n\nconst monthName = [\n  \"‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°\",\n  \"‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå\",\n  \"‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°\",\n  \"‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô\",\n  \"‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°\",\n  \"‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô\",\n  \"‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°\",\n  \"‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°\",\n  \"‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô\",\n  \"‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°\",\n  \"‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô\",\n  \"‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°\",\n];\n\nfunction Blog(props) {\n  return (\n    <>\n      <OpenGraph {...props} />\n      <style jsx>{`\n        a {\n          text-decoration: none;\n          display: inline-block;\n          margin-top: 10px;\n        }\n        a:visited,\n        a {\n          color: black;\n        }\n        a:hover {\n          text-decoration: underline;\n          cursor: pointer;\n        }\n      `}</style>\n      <Link href={props.basepath + \"/\"}>\n        <a>\n          <span>\n            <FontAwesomeIcon icon={faCaretSquareLeft} /> <span>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</span>\n          </span>\n        </a>\n      </Link>\n      <style jsx global>{`\n        .markdown p img {\n          width: 100%;\n          max-height: 450px;\n          object-fit: contain;\n          background-color: #eee;\n          border: 1px solid #ddd;\n        }\n        .imgCaption {\n          display: block;\n          text-align: center;\n          color: #999;\n          white-space: wrap;\n        }\n      `}</style>\n      <Markdown\n        source={`# ${props.title}\\nüìÖ ${props.date}\\n\\n![${props.thumbnailalt}](${props.thumbnail})\\n\\n${props.content}`}\n        renderers={{\n          code: (props) => (\n            <SyntaxHighlighter\n              language={props.language}\n              children={props.value}\n              showLineNumbers={props.language != \"bash\"}\n            />\n          ),\n          image: (imgprops) => {\n            return (\n              <>\n                <img\n                  loading=\"lazy\"\n                  src={\n                    imgprops.src.search(\"http\") === 0\n                      ? imgprops.src\n                      : props.basepath + imgprops.src\n                  }\n                  alt={imgprops.alt}\n                />\n                <span className=\"imgCaption\">{imgprops.alt}</span>\n              </>\n            );\n          },\n        }}\n        escapeHtml={false}\n        className=\"markdown\"\n      />\n    </>\n  );\n}\n\nexport async function getStaticProps({ params }) {\n  const fs = require(\"fs\");\n  const fm = require(\"front-matter\");\n  const resultMarkdown = fm(\n    fs.readFileSync(`./markdown/${params.title}.md`, \"utf8\")\n  );\n\n  let createDate = resultMarkdown.attributes.date.split(\"/\");\n  createDate = new Date(createDate[2], createDate[1] - 1, createDate[0]);\n  const parsedDate = `${createDate.getDate()} ${\n    monthName[createDate.getMonth()]\n  } ${createDate.getFullYear() + 543}`;\n\n  const title = resultMarkdown.attributes.title;\n  const content = resultMarkdown.body;\n  const thumbnail = resultMarkdown.attributes.image;\n  const thumbnailAlt = resultMarkdown.attributes.imageAlt;\n\n  //Description\n  const rmMD = require(\"remove-markdown\");\n  let description = content;\n  description = rmMD(description);\n  description = description\n    .split(\"\\n\")\n    .filter((filter) => filter !== \"\")\n    .join(\" \");\n\n  if (description.length > 160) {\n    description = description.slice(0, 160) + \"...\";\n  }\n\n  return {\n    props: {\n      content,\n      title,\n      date: parsedDate,\n      thumbnail,\n      thumbnailalt: thumbnailAlt || \"\",\n      basedomain: process.env.baseDomain,\n      basepath: process.env.basePath,\n      description,\n    },\n  };\n}\n\nexport async function getStaticPaths() {\n  const fs = require(\"fs\");\n  const fm = require(\"front-matter\");\n  const path = require(\"path\");\n  const markdownArray = fs.readdirSync(\"./markdown\");\n  const contentList = markdownArray.map((markdown) => {\n    const file = fs.readFileSync(`./markdown/${markdown}`, \"utf8\");\n    const content = fm(file);\n    return {\n      fileName: path.parse(markdown).name,\n      title: content.attributes.title,\n    };\n  });\n\n  const staticPaths = { paths: [], fallback: false };\n\n  contentList.forEach((markdown) =>\n    staticPaths.paths.push({\n      params: { title: markdown.fileName },\n    })\n  );\n\n  return staticPaths;\n}\n\nexport default Blog;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBA;AAAA;AAAA;AAwCA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AACA;AAGA;AACA;AAKA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAvBA;AAyBA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA;AACA;;AAuEA;;;;A","sourceRoot":""}